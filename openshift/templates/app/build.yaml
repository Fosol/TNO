kind: Template
apiVersion: v1
metadata:
  name: react-nginx-build
  annotations:
    openshift.io/display-name: React Nginx Web Application Image
    description: Build an image containing the React web application.
    tags: react,nginx
parameters:
  - name: APP_NAME
    displayName: 'Application Name'
    description: 'The name of the application.'
    required: true
    value: 'tno'
  - name: GROUP_NAME
    displayName: 'Component Group Name'
    description: 'The name of the application component (e.g api, app, database).'
    required: true
    value: 'app-editor'
  - name: PROJECT_NAMESPACE
    displayName: 'OpenShift Project Namespace'
    description: 'The namespace of the OpenShift project containing the application.'
    required: true
    value: '9b301c'
  - name: ENV_NAME
    displayName: 'Environment name'
    description: 'The name for this environment [dev, test, prod, tools]'
    required: true
    value: 'tools'
  - name: INSTANCE
    displayName: 'Unique Identifier'
    description: "A unique identifier to allow for multiple instances (i.e. 'dev')."
    value: 'dev'

  - name: GIT_URL
    displayName: 'Git Repository URL'
    description: 'The URL of the repository with your application source code.'
    required: true
    value: 'https://github.com/bcgov/tno.git'
  - name: GIT_REF
    displayName: 'Git Reference'
    description: 'Set this to a branch name, tag or other ref of your repository if you
      are not using the default branch.'
    value: dev
  - name: CONTEXT_DIR
    displayName: 'Context Directory'
    description: 'Set this to use a subdirectory of the source code repository'
    value: 'app/editor'

  - name: FILE_CONFIG_MOUNT_PATH
    displayName: 'Environment File Mount Path'
    description: 'The path to use to mount the config file.'
    required: true
    value: './'
  - name: NODE_ENV
    displayName: 'Node Environment'
    description: 'A way to identify within the app which environment the app is in'
    value: 'production'

  - name: OUTPUT_IMAGE_TAG
    displayName: 'Output Image Tag'
    description: 'The tag given to the built image.'
    required: true
    value: 'latest'

  - name: CPU_LIMIT
    displayName: 'Resources CPU Limit'
    description: 'The resources CPU limit (in cores) for this build.'
    required: true
    value: 2000m
  - name: MEMORY_LIMIT
    displayName: 'Memory Limit'
    description: 'Maximum amount of memory the container can use.'
    required: true
    value: 2Gi
objects:
  # Environment Variable configuration settings.
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${GROUP_NAME}-env.${INSTANCE}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Environment variable configuration
      labels:
        name: ${APP_NAME}-${GROUP_NAME}-env.${INSTANCE}
        app: ${APP_NAME}
        group: ${GROUP_NAME}
        env: ${ENV_NAME}
    data:
      environment.env: |-
        NODE_ENV=${NODE_ENV}
        REACT_APP_NOT_SECRET_CODE=fake-code

  # The final build image.
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${GROUP_NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Keeps track of changes in the image
      labels:
        app: ${APP_NAME}
        group: ${GROUP_NAME}

  # The build config that will be created will be named for the branch you created it for.
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${GROUP_NAME}.${INSTANCE}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Defines how to build the image
      labels:
        name: ${APP_NAME}-${GROUP_NAME}.${INSTANCE}
        app: ${APP_NAME}
        group: ${GROUP_NAME}
        branch: ${GIT_REF}
    spec:
      completionDeadlineSeconds: 1800
      triggers:
        - type: ImageChange
        - type: ConfigChange
      runPolicy: Serial
      source:
        git:
          uri: ${GIT_URL}
          ref: ${GIT_REF}
        contextDir: ${CONTEXT_DIR}
        configMaps:
          - configMap:
              name: ${APP_NAME}-${GROUP_NAME}-env.${INSTANCE}
            destinationDir: ${FILE_CONFIG_MOUNT_PATH}
      strategy:
        type: Docker
        dockerStrategy:
          imageOptimizationPolicy: SkipLayers
          dockerfilePath: Dockerfile.nginx
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}-${GROUP_NAME}:${OUTPUT_IMAGE_TAG}
      resources:
        limits:
          cpu: ${CPU_LIMIT}
          memory: ${MEMORY_LIMIT}
