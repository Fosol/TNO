apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: postgres-db-migration
  annotations:
    description: Java flyway database migration for postgreSQL database
    iconClass: icon-postgresql
    openshift.io/display-name: Java flyway database migration for postgreSQL database
    openshift.io/long-description: Java flyway database migration for postgreSQL database
    tags: postgresql,database,flyway,migration

parameters:
  - name: APP_NAME
    displayName: 'Application Name'
    description: 'The name of the application.'
    required: true
    value: 'tno'
  - name: GROUP_NAME
    displayName: 'Component Group Name'
    description: 'The name of the application component group'
    required: true
    value: 'app-editor'
  - name: PROJECT_NAMESPACE
    displayName: 'OpenShift Project Namespace'
    description: 'The namespace of the OpenShift project containing the application.'
    required: true
    value: '9b301c'
  - name: ENV_NAME
    displayName: 'Environment name'
    description: 'The name for this environment [dev, test, prod]'
    required: true
    value: 'dev'
  - name: INSTANCE
    displayName: 'Unique Identifier'
    description: "A unique identifier to allow for multiple instances (i.e. '-dev')."
    value: ''

  - name: IMAGE_TAG
    displayName: 'Image Tag'
    description: "The image tag that identifies which image to run. (i.e. 'dev')."
    value: 'dev'

  - name: API_GROUP_NAME
    displayName: 'API Component Group Name'
    description: 'The name of the API component group'
    required: true
    value: 'api-editor'

  - name: APP_PORT
    displayName: 'Application Port'
    description: 'The port used to communicate with the Pod'
    value: '8080'

  - name: KEYCLOAK_REALM
    displayName: 'Keycloak SSO realm'
    description: 'Keycloak SSO realm, used by the frontend login.'
    required: true
    value: 'gcpe'
  - name: KEYCLOAK_AUTHORITY_URL
    displayName: 'Keycloak Authority URL'
    description: 'The Keycloak authority URL.'
    required: true
    value: 'https://dev.oidc.gov.bc.ca/auth/'
  - name: KEYCLOAK_CLIENT_ID
    displayName: 'Keycloak Client ID'
    description: 'The Keycloak Client ID to identify the resource.'
    required: true
    value: 'tno-app'
  - name: FILE_CONFIG_MOUNT_PATH
    displayName: 'keycloak.json Mount Path'
    description: 'The path to use to mount the config file.'
    required: true
    value: '/usr/share/nginx/html/'
  - name: KEYCLOAK_CONFIG_FILE_NAME
    displayName: 'keycloak.json Config File Name'
    description: 'The name of the configuration file to be used for keycloak.json.'
    required: true
    value: 'keycloak.json'

  - name: REPLICAS
    displayName: 'Pod Replicas'
    description: 'Number of pod replicas to run'
    value: '3'
  - name: CPU_REQUEST
    displayName: 'Requested Minimum Resources CPU Limit'
    description: 'The requested minimum resources CPU limit (in cores) for this build.'
    required: true
    value: 50m
  - name: CPU_LIMIT
    displayName: 'Resources CPU Limit'
    description: 'The resources CPU limit (in cores) for this build.'
    required: true
    value: 125m
  - name: MEMORY_REQUEST
    displayName: 'Requested Minimum Memory Limit'
    description: 'Minimum requested amount of memory the container can use.'
    required: true
    value: 50Mi
  - name: MEMORY_LIMIT
    displayName: 'Memory Limit'
    description: 'Maximum amount of memory the container can use.'
    required: true
    value: 250Mi

objects:
  # Allow the app to communicate with the api.
  - kind: NetworkPolicy
    apiVersion: networking.k8s.io/v1
    metadata:
      name: pod-from-pod-permit-${APP_NAME}-${GROUP_NAME}-${API_GROUP_NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
    spec:
      #description: Allow api pod(s) to receive communication from app pod(s).
      podSelector:
        matchLabels:
          app: ${APP_NAME}
          group: ${API_GROUP_NAME}
          env: ${ENV_NAME}
      ingress:
        - from:
            - podSelector:
                matchLabels:
                  app: ${APP_NAME}
                  group: ${GROUP_NAME}
                  env: ${ENV_NAME}

  # Open up ports to communicate with the app.
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${GROUP_NAME}${INSTANCE}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Exposes and load balances the application pods.
      labels:
        name: ${APP_NAME}-${GROUP_NAME}${INSTANCE}
        app: ${APP_NAME}
        group: ${GROUP_NAME}
        env: ${ENV_NAME}
    spec:
      ports:
        - name: ${APP_PORT}-tcp
          port: ${{APP_PORT}}
          protocol: TCP
          targetPort: ${{APP_PORT}}
      selector:
        name: ${APP_NAME}-${GROUP_NAME}${INSTANCE}
        app: ${APP_NAME}
        group: ${GROUP_NAME}
        env: ${ENV_NAME}
      sessionAffinity: None
      type: ClusterIP

  # Keycloak configuration settings.
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${GROUP_NAME}-sso${INSTANCE}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Keycloak client JSON configuration
      labels:
        name: ${APP_NAME}-${GROUP_NAME}-sso${INSTANCE}
        app: ${APP_NAME}
        group: ${GROUP_NAME}
        env: ${ENV_NAME}
    type: Opaque
    data:
      keycloak.json: '{
        "realm": "${KEYCLOAK_REALM}",
        "auth-server-url": "${KEYCLOAK_AUTHORITY_URL}",
        "ssl-required": "external",
        "resource": "${KEYCLOAK_CLIENT_ID}",
        "public-client": true,
        "confidential-port": 0
        }'

  # How the app will be deployed to the pod.
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${GROUP_NAME}${INSTANCE}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: 'Defines how to deploy ${APP_NAME}-${GROUP_NAME}'
      labels:
        name: ${APP_NAME}-${GROUP_NAME}${INSTANCE}
        app: ${APP_NAME}
        group: ${GROUP_NAME}
        env: ${ENV_NAME}
    spec:
      replicas: ${{REPLICAS}}
      selector:
        name: ${APP_NAME}-${GROUP_NAME}${INSTANCE}
        app: ${APP_NAME}
        group: ${GROUP_NAME}
        env: ${ENV_NAME}
      strategy:
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          name: ${APP_NAME}-${GROUP_NAME}${INSTANCE}
          labels:
            name: ${APP_NAME}-${GROUP_NAME}${INSTANCE}
            app: ${APP_NAME}
            group: ${GROUP_NAME}
            env: ${ENV_NAME}
        spec:
          volumes:
            - name: '${APP_NAME}-${GROUP_NAME}-keycloak${INSTANCE}'
              configMap:
                name: ${APP_NAME}-${GROUP_NAME}-sso${INSTANCE}
                items:
                  - key: '${KEYCLOAK_CONFIG_FILE_NAME}'
                    path: '${KEYCLOAK_CONFIG_FILE_NAME}'
          containers:
            - name: ${APP_NAME}-${GROUP_NAME}${INSTANCE}
              image: ''
              imagePullPolicy: Always
              ports:
                - containerPort: ${{APP_PORT}}
                  protocol: TCP
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
              volumeMounts:
                - name: '${APP_NAME}-${GROUP_NAME}-keycloak${INSTANCE}'
                  mountPath: '${FILE_CONFIG_MOUNT_PATH}${KEYCLOAK_CONFIG_FILE_NAME}'
                  subPath: '${KEYCLOAK_CONFIG_FILE_NAME}'
              livenessProbe:
                httpGet:
                  path: '/nginx-status'
                  port: ${{APP_PORT}}
                  scheme: HTTP
                initialDelaySeconds: 30
                timeoutSeconds: 60
                periodSeconds: 10
                successThreshold: 1
                failureThreshold: 3
              readinessProbe:
                httpGet:
                  path: '/nginx-status'
                  port: ${{APP_PORT}}
                  scheme: HTTP
                initialDelaySeconds: 10
                timeoutSeconds: 60
                periodSeconds: 10
                successThreshold: 1
                failureThreshold: 3
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          securityContext: {}
          terminationGracePeriodSeconds: 30
      test: false
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${APP_NAME}-${GROUP_NAME}${INSTANCE}
            from:
              kind: ImageStreamTag
              namespace: '${PROJECT_NAMESPACE}-tools'
              name: '${APP_NAME}-${GROUP_NAME}:${IMAGE_TAG}'
